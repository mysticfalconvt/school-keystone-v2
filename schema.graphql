# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  preferredName: String
  email: String
  password: PasswordState
  taStudents(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  taStudentsCount(where: UserWhereInput! = {}): Int
  taTeacher: User
  parent(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  parentCount(where: UserWhereInput! = {}): Int
  children(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  childrenCount(where: UserWhereInput! = {}): Int
  canManageCalendar: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageLinks: Boolean
  canManageDiscipline: Boolean
  canSeeAllDiscipline: Boolean
  canSeeAllTeacherEvents: Boolean
  canSeeStudentEvents: Boolean
  canSeeOwnCallback: Boolean
  canSeeAllCallback: Boolean
  hasTA: Boolean
  hasClasses: Boolean
  isStudent: Boolean
  isParent: Boolean
  isStaff: Boolean
  isTeacher: Boolean
  isGuidance: Boolean
  isSuperAdmin: Boolean
  canManagePbis: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  preferredName: StringFilter
  email: StringFilter
  password: PasswordFilter
  taStudents: UserManyRelationFilter
  taTeacher: UserWhereInput
  parent: UserManyRelationFilter
  children: UserManyRelationFilter
  canManageCalendar: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageLinks: BooleanFilter
  canManageDiscipline: BooleanFilter
  canSeeAllDiscipline: BooleanFilter
  canSeeAllTeacherEvents: BooleanFilter
  canSeeStudentEvents: BooleanFilter
  canSeeOwnCallback: BooleanFilter
  canSeeAllCallback: BooleanFilter
  hasTA: BooleanFilter
  hasClasses: BooleanFilter
  isStudent: BooleanFilter
  isParent: BooleanFilter
  isStaff: BooleanFilter
  isTeacher: BooleanFilter
  isGuidance: BooleanFilter
  isSuperAdmin: BooleanFilter
  canManagePbis: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  preferredName: OrderDirection
  email: OrderDirection
  canManageCalendar: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageLinks: OrderDirection
  canManageDiscipline: OrderDirection
  canSeeAllDiscipline: OrderDirection
  canSeeAllTeacherEvents: OrderDirection
  canSeeStudentEvents: OrderDirection
  canSeeOwnCallback: OrderDirection
  canSeeAllCallback: OrderDirection
  hasTA: OrderDirection
  hasClasses: OrderDirection
  isStudent: OrderDirection
  isParent: OrderDirection
  isStaff: OrderDirection
  isTeacher: OrderDirection
  isGuidance: OrderDirection
  isSuperAdmin: OrderDirection
  canManagePbis: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  preferredName: String
  email: String
  password: String
  taStudents: UserRelateToManyForUpdateInput
  taTeacher: UserRelateToOneForUpdateInput
  parent: UserRelateToManyForUpdateInput
  children: UserRelateToManyForUpdateInput
  canManageCalendar: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageLinks: Boolean
  canManageDiscipline: Boolean
  canSeeAllDiscipline: Boolean
  canSeeAllTeacherEvents: Boolean
  canSeeStudentEvents: Boolean
  canSeeOwnCallback: Boolean
  canSeeAllCallback: Boolean
  hasTA: Boolean
  hasClasses: Boolean
  isStudent: Boolean
  isParent: Boolean
  isStaff: Boolean
  isTeacher: Boolean
  isGuidance: Boolean
  isSuperAdmin: Boolean
  canManagePbis: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  preferredName: String
  email: String
  password: String
  taStudents: UserRelateToManyForCreateInput
  taTeacher: UserRelateToOneForCreateInput
  parent: UserRelateToManyForCreateInput
  children: UserRelateToManyForCreateInput
  canManageCalendar: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageLinks: Boolean
  canManageDiscipline: Boolean
  canSeeAllDiscipline: Boolean
  canSeeAllTeacherEvents: Boolean
  canSeeStudentEvents: Boolean
  canSeeOwnCallback: Boolean
  canSeeAllCallback: Boolean
  hasTA: Boolean
  hasClasses: Boolean
  isStudent: Boolean
  isParent: Boolean
  isStaff: Boolean
  isTeacher: Boolean
  isGuidance: Boolean
  isSuperAdmin: Boolean
  canManagePbis: Boolean
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
